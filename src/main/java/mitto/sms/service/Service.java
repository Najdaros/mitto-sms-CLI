package mitto.sms.service;

import mitto.sms.hibernate.dao.StatsDTO;
import mitto.sms.hibernate.entity.CountryFee;
import mitto.sms.hibernate.entity.Entity;
import mitto.sms.hibernate.entity.SMS;

import java.util.List;

/**
 * An Object implemented Service interface providing basic operation and logic for handling user input
 */
public interface Service {

    /**
     * Setting CountryFeeEnabled true enables using extra information stored in CountryFee entity
     * and changing logic for preparing formatted outputs,
     * @param enabled if true - extending top senders with total price
     */
    void setCountryFeeEnabled(boolean enabled);

    /**
     * Handle persisting entity through repository object
     * @param entity entity to store
     * @return true if save finish successfully and entity is stored
     * @see CountryFee
     */
    boolean saveEntity(Entity entity);
//Ã„
//    /**
//     * Handle persisting CountryFee entity through repository object
//     * @param countryFee entity to store
//     * @return true if save finish successfully and entity is stored
//     * @see CountryFee
//     */
//    boolean saveCountryFee(CountryFee countryFee);
//    /**
//     * Handle persisting SMS entity through repository object
//     * @param sms entity to store
//     * @return true if save finish successfully and entity is stored
//     * @see CountryFee
//     */
//    boolean saveSMS(SMS sms);

    /**
     * providing list of formatted top senders (limited and ordered), every item in list is generated by format base on countryFeeEnabled
     * if countryFeeEnabled is False format:
     * <sender><space><total count of messages>
     * if countryFeeEnabled is True format:
     * <sender><space><total count of messages><space><total sum of messages price>
     * @param limit of senders
     * @return list of formatted sender results
     */
    List<StatsDTO> getTopSendersStats(Integer limit);

    /**
     * providing list of formatted country (ordered), every item in list is generated by format:
     * <country><space><total count of messages><space><total sum of messages price>
     * @return list of formatted country fee results
     */
    List<StatsDTO> getCountryFeeStats();
}
